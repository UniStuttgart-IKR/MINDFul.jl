var documenterSearchIndex = {"docs":
[{"location":"dev/#Notes-for-developes-and-contributors","page":"Developing","title":"Notes for developes and contributors","text":"","category":"section"},{"location":"dev/#Mental-classification-of-functions-per-functionality","page":"Developing","title":"Mental classification of functions per functionality","text":"","category":"section"},{"location":"dev/","page":"Developing","title":"Developing","text":"(must clarify these notes) To expand upon: allocate - deallocate reserve - unreserve function getters get... -> get field new... -> construct something new","category":"page"},{"location":"dev/#How-to-read-variables","page":"Developing","title":"How to read variables","text":"","category":"section"},{"location":"dev/","page":"Developing","title":"Developing","text":"transmission -> trans\nmodule -> mdl\nmode -> mode\nindex -> idx\nuuid -> id\nibn framework -> ibnf\n","category":"page"},{"location":"dev/#Testing","page":"Developing","title":"Testing","text":"","category":"section"},{"location":"dev/","page":"Developing","title":"Developing","text":"Usefull testing functions are in the TestModule weak dependency. To access them you first need to load Test and JET and then use Base.get_extention.","category":"page"},{"location":"dev/","page":"Developing","title":"Developing","text":"# get the test module from MINDFul\nimport Test, JET\nTestModule = Base.get_extension(MINDFul, :TestModule)\n@test !isnothing(TM)","category":"page"},{"location":"dev/","page":"Developing","title":"Developing","text":"Now, with dot notation (TestModule.) you can access all the following functions. ","category":"page"},{"location":"dev/#Testing-API","page":"Developing","title":"Testing API","text":"","category":"section"},{"location":"dev/","page":"Developing","title":"Developing","text":"Modules = [Base.get_extension(MINDFul, :TestModule)]","category":"page"},{"location":"dev/#TestModule.JETfilteroutfunctions-Tuple{Any}","page":"Developing","title":"TestModule.JETfilteroutfunctions","text":"JETfilteroutfunctions(f) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"dev/#TestModule.islowlevelintentdagnodeinstalled-Tuple{MINDFul.IBNFramework, MINDFul.LowLevelIntent}","page":"Developing","title":"TestModule.islowlevelintentdagnodeinstalled","text":"islowlevelintentdagnodeinstalled(\n    ibnf::MINDFul.IBNFramework,\n    lli::MINDFul.LowLevelIntent\n) -> Union{Nothing, Test.Error, Test.Fail, Test.Pass}\n\n\n\n\n\n\n","category":"method"},{"location":"dev/#TestModule.localnodesaregraphnodeidx-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView}","page":"Developing","title":"TestModule.localnodesaregraphnodeidx","text":"localnodesaregraphnodeidx(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView\n)\n\n\n\n\n\n\n","category":"method"},{"location":"dev/#TestModule.nothingisallocated-Tuple{MINDFul.IBNFramework}","page":"Developing","title":"TestModule.nothingisallocated","text":"nothingisallocated(ibnf::MINDFul.IBNFramework)\n\n\n\n\n\n\n","category":"method"},{"location":"dev/#TestModule.testcompilation-Tuple{MINDFul.IBNFramework, Base.UUID}","page":"Developing","title":"TestModule.testcompilation","text":"testcompilation(\n    ibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    withremote\n) -> Union{Nothing, Test.Error, Test.Fail, Test.Pass}\n\n\n\n\n\n\n","category":"method"},{"location":"dev/#TestModule.testinstallation-Tuple{MINDFul.IBNFramework, Base.UUID}","page":"Developing","title":"TestModule.testinstallation","text":"testinstallation(\n    ibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    withremote\n) -> Union{Nothing, Test.Error, Test.Fail, Test.Pass}\n\n\n\n\n\n\n","category":"method"},{"location":"dev/#TestModule.testlocalnodeisindex-Tuple{Any}","page":"Developing","title":"TestModule.testlocalnodeisindex","text":"testlocalnodeisindex(\n    ibnf\n) -> Union{Test.Error, Test.Fail, Test.Pass}\n\n\n\n\n\n\n","category":"method"},{"location":"dev/#TestModule.testoxcfiberallocationconsistency-Tuple{Any}","page":"Developing","title":"TestModule.testoxcfiberallocationconsistency","text":"testoxcfiberallocationconsistency(ibnf)\n\n\nCheck if the IBNFramework fiber allocations are done from both endpoint oxcviews\n\n\n\n\n\n","category":"method"},{"location":"dev/#TestModule.testuncompilation-Tuple{MINDFul.IBNFramework, Base.UUID}","page":"Developing","title":"TestModule.testuncompilation","text":"testuncompilation(\n    ibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID\n) -> Union{Test.Error, Test.Fail, Test.Pass}\n\n\n\n\n\n\n","category":"method"},{"location":"dev/#TestModule.testuninstallation-Tuple{MINDFul.IBNFramework, Base.UUID}","page":"Developing","title":"TestModule.testuninstallation","text":"testuninstallation(\n    ibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    withremote,\n    shouldempty\n)\n\n\n\n\n\n\n","category":"method"},{"location":"roadmap/#ROADMap","page":"ROADMap","title":"ROADMap","text":"","category":"section"},{"location":"roadmap/","page":"ROADMap","title":"ROADMap","text":"[x] rewrite (faster, more readable, and cleaner)\n[ ] update companion packages\n[ ] experimental bindings with TeraFlowSDN\n[ ] enable distributed operation","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Welcome to MINDFul.jl documentation","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"MINDFul.jl is an open source tool for studying IP-optical intent-based networking.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Intents are compiled down to further lower level intets forming an Directed Acyclic Graph (DAG). The leafs of the DAG are called \"low level intents\" and are basically hardware configurations for the devices.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"There are currently 3 devices to consider:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"the node as a whole\nthe router\nthe optical cross connect (OXC)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For each of those devices a LLI is corresponding","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"MINDFul.jl was rewritten. Better docs soon.","category":"page"},{"location":"API/#Public-getters-interface","page":"API","title":"Public getters interface","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [MINDFul, MINDFul.IntentState]\nPrivate = false\nOrder   = [:function]\nFilter = t -> t isa Function && occursin(r\"^get\", String(Symbol(t)))","category":"page"},{"location":"API/#MINDFul.getadddropportnumber-Tuple{MINDFul.OXCView}","page":"API","title":"MINDFul.getadddropportnumber","text":"getadddropportnumber(oxcview::MINDFul.OXCView) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getborderedges-Tuple{MINDFul.IBNFramework}","page":"API","title":"MINDFul.getborderedges","text":"getborderedges(\n    ibnf::MINDFul.IBNFramework\n) -> Vector{Graphs.SimpleGraphs.SimpleEdge{Int64}}\n\n\nReturn all border edges that contain at least one border node as endpoints\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getborderglobaledges-Tuple{MINDFul.IBNFramework}","page":"API","title":"MINDFul.getborderglobaledges","text":"getborderglobaledges(ibnf::MINDFul.IBNFramework) -> Vector\n\n\nReturn all border edges that contain at least one border node as endpoints as global \n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getbordernodesasglobal-Tuple{MINDFul.IBNFramework}","page":"API","title":"MINDFul.getbordernodesasglobal","text":"getbordernodesasglobal(ibnf::MINDFul.IBNFramework) -> Vector\n\n\nReturn all border nodes of ibnf with globalnode representation\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getbordernodesaslocal-Tuple{MINDFul.IBNFramework}","page":"API","title":"MINDFul.getbordernodesaslocal","text":"getbordernodesaslocal(ibnf::MINDFul.IBNFramework) -> Vector\n\n\nReturn all border nodes of ibnf with localnode representation\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getconstraints-Tuple{MINDFul.ConnectivityIntent}","page":"API","title":"MINDFul.getconstraints","text":"getconstraints(\n    conintent::MINDFul.ConnectivityIntent\n) -> Vector{T} where T<:MINDFul.AbstractIntentConstraint\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getcost-Tuple{Any}","page":"API","title":"MINDFul.getcost","text":"getcost(s) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getcurrentstate-Tuple{Array{Tuple{Dates.DateTime, S}, 1} where S<:Enum{Int32}}","page":"API","title":"MINDFul.getcurrentstate","text":"getcurrentstate(\n    intentlogstate::Array{Tuple{Dates.DateTime, S}, 1} where S<:Enum{Int32}\n) -> Enum{Int32}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getdestinationnode-Tuple{MINDFul.ConnectivityIntent}","page":"API","title":"MINDFul.getdestinationnode","text":"getdestinationnode(\n    conintent::MINDFul.ConnectivityIntent\n) -> MINDFul.GlobalNode\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getdistance-Tuple{Any}","page":"API","title":"MINDFul.getdistance","text":"getdistance(\n    s\n) -> Unitful.Quantity{Float64, ùêã, Unitful.FreeUnits{(km,), ùêã, nothing}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getdistance-Tuple{MINDFul.EdgeView}","page":"API","title":"MINDFul.getdistance","text":"getdistance(\n    s::MINDFul.EdgeView\n) -> Unitful.Quantity{Float64, ùêã, Unitful.FreeUnits{(km,), ùêã, nothing}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getedgeview-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView, Graphs.SimpleGraphs.SimpleEdge}","page":"API","title":"MINDFul.getedgeview","text":"getedgeview(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView,\n    ed::Graphs.SimpleGraphs.SimpleEdge\n) -> MINDFul.EdgeView\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getedgeviews-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView}","page":"API","title":"MINDFul.getedgeviews","text":"getedgeviews(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView\n) -> Vector\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getfiberspectrumavailabilities-Tuple{Any, Graphs.SimpleGraphs.SimpleEdge{Int64}}","page":"API","title":"MINDFul.getfiberspectrumavailabilities","text":"getfiberspectrumavailabilities(\n    ibnf,\n    edge::Graphs.SimpleGraphs.SimpleEdge{Int64};\n    checkfirst\n) -> Vector{Bool}\n\n\nGet the spectrum availability slots vector for edge\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getglobalnode-Tuple{Any}","page":"API","title":"MINDFul.getglobalnode","text":"getglobalnode(s) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getglobalnode-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView, Int64}","page":"API","title":"MINDFul.getglobalnode","text":"getglobalnode(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView,\n    localnode::Int64\n) -> MINDFul.GlobalNode\n\n\nReturn the global representation given the local representation. Return nothing if not found\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getibnag-Tuple{Any}","page":"API","title":"MINDFul.getibnag","text":"getibnag(s) -> Any\n\n\nGet the IBNAttributeGraph\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getibnfhandler-Tuple{MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.getibnfhandler","text":"getibnfhandler(\n    s::MINDFul.IBNFramework,\n    uuid::Base.UUID\n) -> MINDFul.AbstractIBNFHandler\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getibnfhandlers-Tuple{MINDFul.IBNFramework}","page":"API","title":"MINDFul.getibnfhandlers","text":"getibnfhandlers(\n    s::MINDFul.IBNFramework\n) -> Vector{H} where H<:MINDFul.AbstractIBNFHandler\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getibnfid-Tuple{Any}","page":"API","title":"MINDFul.getibnfid","text":"getibnfid(s) -> Base.UUID\n\n\nGet the id of the IBNFramework\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getibnfid-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView}","page":"API","title":"MINDFul.getibnfid","text":"getibnfid(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView\n) -> Base.UUID\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getibnfid-Tuple{MINDFul.RemoteIntent}","page":"API","title":"MINDFul.getibnfid","text":"getibnfid(ri::MINDFul.RemoteIntent) -> Base.UUID\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidag-Tuple{MINDFul.IBNFramework}","page":"API","title":"MINDFul.getidag","text":"getidag(\n    s::MINDFul.IBNFramework\n) -> AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}\n\n\nGet the IntentDAG\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagcounter-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}}","page":"API","title":"MINDFul.getidagcounter","text":"getidagcounter(\n    intentdag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagcounter-Tuple{MINDFul.IntentDAGInfo}","page":"API","title":"MINDFul.getidagcounter","text":"getidagcounter(\n    intentdaginfo::MINDFul.IntentDAGInfo\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodeid-Tuple{MINDFul.IntentDAGNode}","page":"API","title":"MINDFul.getidagnodeid","text":"getidagnodeid(idagnode::MINDFul.IntentDAGNode) -> Base.UUID\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodeid-Tuple{MINDFul.RemoteIntent}","page":"API","title":"MINDFul.getidagnodeid","text":"getidagnodeid(ri::MINDFul.RemoteIntent) -> Base.UUID\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodestate-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, Base.UUID}","page":"API","title":"MINDFul.getidagnodestate","text":"getidagnodestate(\n    intentdag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    dagnodeid::Base.UUID\n) -> MINDFul.IntentState.T\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodestate-Tuple{MINDFul.IntentDAGNode}","page":"API","title":"MINDFul.getidagnodestate","text":"getidagnodestate(\n    idagnode::MINDFul.IntentDAGNode\n) -> MINDFul.IntentState.T\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getinneighbors-Tuple{MINDFul.NodeProperties}","page":"API","title":"MINDFul.getinneighbors","text":"getinneighbors(np::MINDFul.NodeProperties) -> Vector{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getintent-Tuple{MINDFul.IntentDAGNode}","page":"API","title":"MINDFul.getintent","text":"getintent(\n    idagnode::MINDFul.IntentDAGNode\n) -> MINDFul.AbstractIntent\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getintent-Tuple{MINDFul.RemoteIntent}","page":"API","title":"MINDFul.getintent","text":"getintent(\n    ri::MINDFul.RemoteIntent\n) -> MINDFul.AbstractIntent\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getintranodeviews-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView}","page":"API","title":"MINDFul.getintranodeviews","text":"getintranodeviews(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView\n) -> Vector{T} where T<:MINDFul.NodeView\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getisinitiator-Tuple{MINDFul.RemoteIntent}","page":"API","title":"MINDFul.getisinitiator","text":"getisinitiator(ri::MINDFul.RemoteIntent) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getlatitude-Tuple{MINDFul.NodeProperties}","page":"API","title":"MINDFul.getlatitude","text":"getlatitude(np::MINDFul.NodeProperties) -> Float64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getlinkspectrumavailabilities-Tuple{MINDFul.OXCView}","page":"API","title":"MINDFul.getlinkspectrumavailabilities","text":"getlinkspectrumavailabilities(\n    oxcview::MINDFul.OXCView\n) -> Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, Vector{Bool}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getlocalnode-Tuple{Any}","page":"API","title":"MINDFul.getlocalnode","text":"getlocalnode(s) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getlocalnode-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView, MINDFul.GlobalNode}","page":"API","title":"MINDFul.getlocalnode","text":"getlocalnode(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView,\n    globalnode::MINDFul.GlobalNode\n) -> Any\n\n\nReturn the localnode representation given the global representation. Return nothing if not found\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getlocalnode_input-Tuple{MINDFul.OXCAddDropBypassSpectrumLLI}","page":"API","title":"MINDFul.getlocalnode_input","text":"getlocalnode_input(\n    oxcswitchreservationentry::MINDFul.OXCAddDropBypassSpectrumLLI\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getlocalnode_output-Tuple{MINDFul.OXCAddDropBypassSpectrumLLI}","page":"API","title":"MINDFul.getlocalnode_output","text":"getlocalnode_output(\n    oxcswitchentry::MINDFul.OXCAddDropBypassSpectrumLLI\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getlogstate-Tuple{MINDFul.IntentDAGNode}","page":"API","title":"MINDFul.getlogstate","text":"getlogstate(\n    idagnode::MINDFul.IntentDAGNode\n) -> Vector{Tuple{Dates.DateTime, MINDFul.IntentState.T}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getlongitude-Tuple{MINDFul.NodeProperties}","page":"API","title":"MINDFul.getlongitude","text":"getlongitude(np::MINDFul.NodeProperties) -> Float64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getnodeproperties-Tuple{MINDFul.NodeView}","page":"API","title":"MINDFul.getnodeproperties","text":"getnodeproperties(\n    s::MINDFul.NodeView\n) -> MINDFul.NodeProperties\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getnodeview-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView, Int64}","page":"API","title":"MINDFul.getnodeview","text":"getnodeview(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView,\n    node::Int64\n) -> MINDFul.NodeView\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getnodeview-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView, MINDFul.GlobalNode}","page":"API","title":"MINDFul.getnodeview","text":"getnodeview(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView,\n    node::MINDFul.GlobalNode\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getnodeview-Tuple{MINDFul.IBNFramework, Int64}","page":"API","title":"MINDFul.getnodeview","text":"getnodeview(\n    ibnf::MINDFul.IBNFramework,\n    node::Int64\n) -> MINDFul.NodeView\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getnodeviews-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView}","page":"API","title":"MINDFul.getnodeviews","text":"getnodeviews(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView\n) -> Vector{T} where T<:MINDFul.NodeView\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getopticalinitiateconstraint-Tuple{MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.getopticalinitiateconstraint","text":"getopticalinitiateconstraint(\n    ibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID\n) -> Union{Nothing, MINDFul.OpticalInitiateConstraint}\n\n\nGet the OpticalInitiateConstraint for the current intent DAG. If the compilation is not optically terminated return nothing.\n\nTo me this has all the logic needed to be type stable but the compiler fails.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getopticalreach-Tuple{MINDFul.TransmissionMode}","page":"API","title":"MINDFul.getopticalreach","text":"getopticalreach(\n    tm::MINDFul.TransmissionMode\n) -> Unitful.Quantity{Float64, ùêã, Unitful.FreeUnits{(km,), ùêã, nothing}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getoutneighbors-Tuple{MINDFul.NodeProperties}","page":"API","title":"MINDFul.getoutneighbors","text":"getoutneighbors(np::MINDFul.NodeProperties) -> Vector{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getoxcadddropportindex-Tuple{MINDFul.OXCAddDropBypassSpectrumLLI}","page":"API","title":"MINDFul.getoxcadddropportindex","text":"getoxcadddropportindex(\n    s::MINDFul.OXCAddDropBypassSpectrumLLI\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getoxcview-Tuple{MINDFul.NodeView}","page":"API","title":"MINDFul.getoxcview","text":"getoxcview(\n    s::MINDFul.NodeView\n) -> Union{Nothing, MINDFul.OXCView}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getpathspectrumavailabilities-Tuple{MINDFul.IBNFramework, Vector{Int64}}","page":"API","title":"MINDFul.getpathspectrumavailabilities","text":"getpathspectrumavailabilities(\n    ibnf::MINDFul.IBNFramework,\n    localnodespath::Vector{Int64};\n    checkfirst\n) -> Any\n\n\nGet spectrum availabilities along a path of nodes as a BitVector\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getport_adddrop-Tuple{MINDFul.OXCAddDropBypassSpectrumLLI}","page":"API","title":"MINDFul.getport_adddrop","text":"getport_adddrop(\n    oxcswitchentry::MINDFul.OXCAddDropBypassSpectrumLLI\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getportnumber-Tuple{Any}","page":"API","title":"MINDFul.getportnumber","text":"getportnumber(s) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getproperties-Tuple{MINDFul.EdgeView}","page":"API","title":"MINDFul.getproperties","text":"getproperties(s::MINDFul.EdgeView) -> MINDFul.EdgeProperties\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getproperties-Tuple{MINDFul.NodeView}","page":"API","title":"MINDFul.getproperties","text":"getproperties(s::MINDFul.NodeView) -> MINDFul.NodeProperties\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getrate-Tuple{MINDFul.ConnectivityIntent}","page":"API","title":"MINDFul.getrate","text":"getrate(\n    conintent::MINDFul.ConnectivityIntent\n) -> Unitful.Quantity{Float64, Data ùêì^-1, Unitful.FreeUnits{(Gbps,), Data ùêì^-1, nothing}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getrate-Tuple{MINDFul.TransmissionMode}","page":"API","title":"MINDFul.getrate","text":"getrate(\n    tm::MINDFul.TransmissionMode\n) -> Unitful.Quantity{Float64, Data ùêì^-1, Unitful.FreeUnits{(Gbps,), Data ùêì^-1, nothing}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getrate-Tuple{MINDFul.TransmissionModuleCompatibility}","page":"API","title":"MINDFul.getrate","text":"getrate(\n    tmc::MINDFul.TransmissionModuleCompatibility\n) -> Unitful.Quantity{Float64, Data ùêì^-1, Unitful.FreeUnits{(Gbps,), Data ùêì^-1, nothing}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getreservations-Tuple{MINDFul.NodeView}","page":"API","title":"MINDFul.getreservations","text":"getreservations(\n    nodeview::MINDFul.NodeView\n) -> Union{Nothing, Dict{Base.UUID, MINDFul.TransmissionModuleLLI}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getreservations-Tuple{MINDFul.OXCView}","page":"API","title":"MINDFul.getreservations","text":"getreservations(\n    oxcview::MINDFul.OXCView\n) -> Dict{Base.UUID, MINDFul.OXCAddDropBypassSpectrumLLI}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getreservations-Tuple{MINDFul.RouterView}","page":"API","title":"MINDFul.getreservations","text":"getreservations(\n    routerview::MINDFul.RouterView\n) -> Dict{Base.UUID, MINDFul.RouterPortLLI}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getreservedtransmissionmode-Tuple{MINDFul.IBNFramework, MINDFul.IntentDAGNode{MINDFul.TransmissionModuleLLI}}","page":"API","title":"MINDFul.getreservedtransmissionmode","text":"getreservedtransmissionmode(\n    ibnf::MINDFul.IBNFramework,\n    idagnode::MINDFul.IntentDAGNode{MINDFul.TransmissionModuleLLI};\n    verbose\n) -> Union{Bool, MINDFul.TransmissionMode}\n\n\nGet the reserved transmission mode\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getrouterportindex-Tuple{MINDFul.RouterPortLLI}","page":"API","title":"MINDFul.getrouterportindex","text":"getrouterportindex(s::MINDFul.RouterPortLLI) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getrouterview-Tuple{MINDFul.NodeView}","page":"API","title":"MINDFul.getrouterview","text":"getrouterview(\n    s::MINDFul.NodeView\n) -> Union{Nothing, MINDFul.RouterView}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getsdncontroller-Tuple{Any}","page":"API","title":"MINDFul.getsdncontroller","text":"getsdncontroller(s) -> Any\n\n\nGet the sdn controller subtype of AbstractSDNController\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getsourcenode-Tuple{MINDFul.ConnectivityIntent}","page":"API","title":"MINDFul.getsourcenode","text":"getsourcenode(\n    conintent::MINDFul.ConnectivityIntent\n) -> MINDFul.GlobalNode\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getspectrumavailability-Tuple{Any}","page":"API","title":"MINDFul.getspectrumavailability","text":"getspectrumavailability(s) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getspectrumslots-Tuple{Any}","page":"API","title":"MINDFul.getspectrumslots","text":"getspectrumslots(s) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getspectrumslotsneeded-Tuple{MINDFul.TransmissionMode}","page":"API","title":"MINDFul.getspectrumslotsneeded","text":"getspectrumslotsneeded(\n    tm::MINDFul.TransmissionMode\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getspectrumslotsneeded-Tuple{MINDFul.TransmissionModuleCompatibility}","page":"API","title":"MINDFul.getspectrumslotsneeded","text":"getspectrumslotsneeded(\n    tmc::MINDFul.TransmissionModuleCompatibility\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getspectrumslotsrange-Tuple{MINDFul.OXCAddDropBypassSpectrumLLI}","page":"API","title":"MINDFul.getspectrumslotsrange","text":"getspectrumslotsrange(\n    oxcswitchentry::MINDFul.OXCAddDropBypassSpectrumLLI\n) -> UnitRange{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.gettransmissionmode-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView, MINDFul.TransmissionModuleLLI}","page":"API","title":"MINDFul.gettransmissionmode","text":"gettransmissionmode(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView,\n    oxclli::MINDFul.TransmissionModuleLLI\n) -> MINDFul.TransmissionMode\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.gettransmissionmode-Tuple{MINDFul.IBNFramework, MINDFul.IntentDAGNode{MINDFul.TransmissionModuleLLI}}","page":"API","title":"MINDFul.gettransmissionmode","text":"gettransmissionmode(\n    ibnf::MINDFul.IBNFramework,\n    idagnode::MINDFul.IntentDAGNode{MINDFul.TransmissionModuleLLI}\n) -> MINDFul.TransmissionMode\n\n\nGet the transmission mode\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.gettransmissionmode-Tuple{MINDFul.IBNFramework, MINDFul.TransmissionModuleLLI}","page":"API","title":"MINDFul.gettransmissionmode","text":"gettransmissionmode(\n    ibnf::MINDFul.IBNFramework,\n    intent::MINDFul.TransmissionModuleLLI\n) -> MINDFul.TransmissionMode\n\n\nGet the transmission mode\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.gettransmissionmode-Tuple{MINDFul.TransmissionModuleView, Int64}","page":"API","title":"MINDFul.gettransmissionmode","text":"gettransmissionmode(\n    s::MINDFul.TransmissionModuleView,\n    transmissionmodeidx::Int64\n) -> MINDFul.TransmissionMode\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.gettransmissionmodes-Tuple{MINDFul.TransmissionModuleView}","page":"API","title":"MINDFul.gettransmissionmodes","text":"gettransmissionmodes(\n    s::MINDFul.TransmissionModuleView\n) -> Vector{MINDFul.TransmissionMode}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.gettransmissionmodesindex-Tuple{MINDFul.TransmissionModuleLLI}","page":"API","title":"MINDFul.gettransmissionmodesindex","text":"gettransmissionmodesindex(\n    s::MINDFul.TransmissionModuleLLI\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.gettransmissionmodule-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView, MINDFul.TransmissionModuleLLI}","page":"API","title":"MINDFul.gettransmissionmodule","text":"gettransmissionmodule(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView,\n    oxclli::MINDFul.TransmissionModuleLLI\n) -> MINDFul.TransmissionModuleView\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.gettransmissionmodule-Tuple{MINDFul.IBNFramework, MINDFul.TransmissionModuleLLI}","page":"API","title":"MINDFul.gettransmissionmodule","text":"gettransmissionmodule(\n    ibnf::MINDFul.IBNFramework,\n    intent::MINDFul.TransmissionModuleLLI\n) -> MINDFul.TransmissionModuleView\n\n\nGet the transmission mode\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.gettransmissionmodulecompat-Tuple{MINDFul.OpticalInitiateConstraint}","page":"API","title":"MINDFul.gettransmissionmodulecompat","text":"gettransmissionmodulecompat(\n    oic::MINDFul.OpticalInitiateConstraint\n) -> MINDFul.TransmissionModuleCompatibility\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.gettransmissionmodulereservations-Tuple{MINDFul.NodeView}","page":"API","title":"MINDFul.gettransmissionmodulereservations","text":"gettransmissionmodulereservations(\n    s::MINDFul.NodeView\n) -> Dict{Base.UUID, MINDFul.TransmissionModuleLLI}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.gettransmissionmoduleviewpool-Tuple{MINDFul.NodeView}","page":"API","title":"MINDFul.gettransmissionmoduleviewpool","text":"gettransmissionmoduleviewpool(\n    s::MINDFul.NodeView\n) -> Union{Nothing, Vector{T}} where T<:MINDFul.TransmissionModuleView\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.gettransmissionmoduleviewpoolindex-Tuple{MINDFul.TransmissionModuleLLI}","page":"API","title":"MINDFul.gettransmissionmoduleviewpoolindex","text":"gettransmissionmoduleviewpoolindex(\n    s::MINDFul.TransmissionModuleLLI\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getunderlyingequipment-Tuple{MINDFul.TransmissionModuleView}","page":"API","title":"MINDFul.getunderlyingequipment","text":"getunderlyingequipment(\n    s::MINDFul.TransmissionModuleView\n) -> MINDFul.AbstractTransmissionModule\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getweights-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView}","page":"API","title":"MINDFul.getweights","text":"getweights(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView\n) -> Matrix\n\n\n\n\n\n\n","category":"method"},{"location":"API/#Other-public-interface","page":"API","title":"Other public interface","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [MINDFul, MINDFul.IntentState]\nPrivate = false\nOrder   = [:module, :constant, :type, :function, :macro]\nFilter = t -> !(t isa Function) || !occursin(r\"^get\", String(Symbol(t)))","category":"page"},{"location":"API/#MINDFul.addintent!-Tuple{MINDFul.IBNFramework, MINDFul.AbstractIntent, MINDFul.IntentIssuer}","page":"API","title":"MINDFul.addintent!","text":"addintent!(\n    ibnf::MINDFul.IBNFramework,\n    intent::MINDFul.AbstractIntent,\n    intentissuer::MINDFul.IntentIssuer\n) -> Base.UUID\n\n\nAdd a new user intent to the IBN framework.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.compileintent!-Tuple{MINDFul.IBNFramework, Base.UUID, MINDFul.IntentCompilationAlgorithm}","page":"API","title":"MINDFul.compileintent!","text":"compileintent!(\n    ibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID,\n    algorithm::MINDFul.IntentCompilationAlgorithm;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.compileintent!-Tuple{MINDFul.IBNFramework, MINDFul.IntentDAGNode{<:MINDFul.ConnectivityIntent}, MINDFul.KShorestPathFirstFitCompilation}","page":"API","title":"MINDFul.compileintent!","text":"compileintent!(\n    ibnf::MINDFul.IBNFramework,\n    idagnode::MINDFul.IntentDAGNode{<:MINDFul.ConnectivityIntent},\n    kspffalg::MINDFul.KShorestPathFirstFitCompilation\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.compileintent!-Tuple{MINDFul.IBNFramework, MINDFul.IntentDAGNode{<:MINDFul.RemoteIntent}, MINDFul.IntentCompilationAlgorithm}","page":"API","title":"MINDFul.compileintent!","text":"compileintent!(\n    ibnf::MINDFul.IBNFramework,\n    idagnode::MINDFul.IntentDAGNode{<:MINDFul.RemoteIntent},\n    algorithm::MINDFul.IntentCompilationAlgorithm\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.findindexglobalnode-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView, MINDFul.GlobalNode}","page":"API","title":"MINDFul.findindexglobalnode","text":"findindexglobalnode(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView,\n    globalnode::MINDFul.GlobalNode\n) -> Union{Nothing, Int64}\n\n\nConvenience function that returns the findfirst for the global node \n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.installintent!-Tuple{MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.installintent!","text":"installintent!(\n    ibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.isbordernode-Tuple{MINDFul.IBNFramework, Int64}","page":"API","title":"MINDFul.isbordernode","text":"isbordernode(\n    ibnf::MINDFul.IBNFramework,\n    localnode::Int64\n) -> Any\n\n\nReturn boolean if localnode is in ibnf as a border node\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.isbordernode-Tuple{MINDFul.IBNFramework, MINDFul.GlobalNode}","page":"API","title":"MINDFul.isbordernode","text":"isbordernode(\n    ibnf::MINDFul.IBNFramework,\n    globalnode::MINDFul.GlobalNode\n) -> Any\n\n\nReturn boolean if globalnode is in ibnf as a border node\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.isinternalnode-Tuple{MINDFul.IBNFramework, MINDFul.GlobalNode}","page":"API","title":"MINDFul.isinternalnode","text":"isinternalnode(\n    ibnf::MINDFul.IBNFramework,\n    globalnode::MINDFul.GlobalNode\n) -> Bool\n\n\nReturn boolean if globalnode belongs to ibnf\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.remoteintent!-Tuple{MINDFul.IBNFramework, MINDFul.IntentDAGNode, Base.UUID}","page":"API","title":"MINDFul.remoteintent!","text":"remoteintent!(\n    ibnf::MINDFul.IBNFramework,\n    idagnode::MINDFul.IntentDAGNode,\n    remoteibnfid::Base.UUID\n) -> MINDFul.IntentDAGNode{I, MINDFul.MachineGenerated} where I<:MINDFul.RemoteIntent\n\n\nAdd a RemoteIntent as a child intent and delegate it to the ibn with id remoteibndif\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.removeintent!-Tuple{MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.removeintent!","text":"removeintent!(\n    ibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.uncompileintent!-Tuple{MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.uncompileintent!","text":"uncompileintent!(\n    ibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.uninstallintent!-Tuple{MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.uninstallintent!","text":"uninstallintent!(\n    ibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.IntentState","page":"API","title":"MINDFul.IntentState","text":"All possible default intent states. Another intent state schema could be defined.\n\n\n\n\n\n","category":"module"},{"location":"API/#Non-public-interface","page":"API","title":"Non-public interface","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Modules = [MINDFul, MINDFul.IntentState]\nPublic = false","category":"page"},{"location":"API/#MINDFul.KSPFFalg","page":"API","title":"MINDFul.KSPFFalg","text":"The keyword for KShorestPathFirstFitCompilation\n\n\n\n\n\n","category":"constant"},{"location":"API/#MINDFul.AbstractIBNFHandler","page":"API","title":"MINDFul.AbstractIBNFHandler","text":"A handler or API for IBNFrameworks to talk to each other\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.AbstractIntent","page":"API","title":"MINDFul.AbstractIntent","text":"abstract type AbstractIntent\n\nA concrete subtype of AbstractIntent must implement the following methods: \n\nis_low_level_intent\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.AbstractIntentConstraint","page":"API","title":"MINDFul.AbstractIntentConstraint","text":"Special requirements for an intent (such as QoS)\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.AbstractOperationMode","page":"API","title":"MINDFul.AbstractOperationMode","text":"How the IBN frameworks operates generally.  It has effect of the available compilation algorithms In the future it could also have effect on different intent state machines\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.AbstractSDNController","page":"API","title":"MINDFul.AbstractSDNController","text":"The abstract type of the SDN controllers\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.ConnectivityIntent","page":"API","title":"MINDFul.ConnectivityIntent","text":"struct ConnectivityIntent{T<:MINDFul.AbstractIntentConstraint} <: MINDFul.AbstractIntent\n\nsourcenode::MINDFul.GlobalNode: Source node\ndestinationnode::MINDFul.GlobalNode: Destination node\nrate::Unitful.Quantity{Float64, Data ùêì^-1, Unitful.FreeUnits{(Gbps,), Data ùêì^-1, nothing}}: Bandwidth request value (Gbps)\nconstraints::Vector{T} where T<:MINDFul.AbstractIntentConstraint: Constraints for the Connecivity intent\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.DefaultOperationMode","page":"API","title":"MINDFul.DefaultOperationMode","text":"Default operation mode defined in MINDFul.jl\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.EdgeProperties","page":"API","title":"MINDFul.EdgeProperties","text":"struct EdgeProperties\n\ndistance::Unitful.Quantity{Float64, ùêã, Unitful.FreeUnits{(km,), ùêã, nothing}}: The distance of the edge (assumed km)\n\nAn immutable description of the edge properties\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.EdgeView","page":"API","title":"MINDFul.EdgeView","text":"struct EdgeView\n\nedgeproperties::MINDFul.EdgeProperties: The EdgeProperties\n\nThe view of the current edge settings\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.GlobalNode","page":"API","title":"MINDFul.GlobalNode","text":"struct GlobalNode\n\nibnfid::Base.UUID: IBN Framework id\nlocalnode::Int64: Node number\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.IBNAttributeGraph","page":"API","title":"MINDFul.IBNAttributeGraph","text":"The graph of the IBN Framework is expressed with this `AttributeGraph`.\nBorder nodes are assumed to be visible from both sides.\nHowever only the official owner can issue an intent.\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.IBNFramework","page":"API","title":"MINDFul.IBNFramework","text":"struct IBNFramework{O<:MINDFul.AbstractOperationMode, S<:MINDFul.AbstractSDNController, T<:(AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView), H<:MINDFul.AbstractIBNFHandler} <: MINDFul.AbstractIBNFHandler\n\noperationmode::MINDFul.AbstractOperationMode: The operation mode of the IBN framework\nibnfid::Base.UUID: The id of this IBN Framework instance\nintentdag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}: The intent dag tree that contains all intents (can be disconnected graph)\nibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView: Single-domain internal graph with border nodes included\nibnfhandlers::Vector{H} where H<:MINDFul.AbstractIBNFHandler: Other IBN Frameworks handles\nsdncontroller::MINDFul.AbstractSDNController: SDN controller handle\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.IBNFramework-Tuple{T} where T<:(AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView)","page":"API","title":"MINDFul.IBNFramework","text":"IBNFramework(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView\n) -> MINDFul.IBNFramework{MINDFul.DefaultOperationMode, MINDFul.SDNdummy, T, H} where {T<:(AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView), H<:(MINDFul.IBNFramework{MINDFul.DefaultOperationMode, MINDFul.SDNdummy})}\n\n\nThe most default construct with abstract type of IBN handlers\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.IBNFramework-Union{Tuple{H}, Tuple{T}, Tuple{T, Vector{H}}} where {T<:(AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView), H<:MINDFul.AbstractIBNFHandler}","page":"API","title":"MINDFul.IBNFramework","text":"IBNFramework(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView,\n    ibnfhandlers::Array{H<:MINDFul.AbstractIBNFHandler, 1}\n) -> MINDFul.IBNFramework{MINDFul.DefaultOperationMode, MINDFul.SDNdummy}\n\n\nConstructor that specify IBNFHandlers to make it potentially type stable\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.IBNIssuer","page":"API","title":"MINDFul.IBNIssuer","text":"struct IBNIssuer <: MINDFul.IntentIssuer\n\nIntent is issued by an IBN Framework domain\n\nibnfid::Base.UUID: the id of the IBNF issued the intent\nidagnodeid::Base.UUID: The id of the intent node in the DAG. The issuer of this intent node points back in this IBNIssuer instance.\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.IntentCompilationAlgorithm","page":"API","title":"MINDFul.IntentCompilationAlgorithm","text":"Instances of this specify how to compile the intent\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.IntentDAG","page":"API","title":"MINDFul.IntentDAG","text":"An AttributeGraph graph used as an intent Directed Acyclic Graph (DAG)\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.IntentDAGInfo-Tuple{}","page":"API","title":"MINDFul.IntentDAGInfo","text":"IntentDAGInfo() -> MINDFul.IntentDAGInfo\n\n\nEmpty constructor \n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.IntentDAGNode","page":"API","title":"MINDFul.IntentDAGNode","text":"struct IntentDAGNode{I<:MINDFul.AbstractIntent, II<:MINDFul.IntentIssuer}\n\nintent::MINDFul.AbstractIntent: The intent itself\nidagnodeid::Base.UUID: The id of the intent w.r.t. the intent DAG it belongs\nintentissuer::MINDFul.IntentIssuer: The intent issuer\nlogstate::Vector{Tuple{Dates.DateTime, MINDFul.IntentState.T}}: The history of states of the intent with the last being the current state\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.IntentIssuer","page":"API","title":"MINDFul.IntentIssuer","text":"Characterizes the entity issuing an intent\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.IntentLogState","page":"API","title":"MINDFul.IntentLogState","text":"IntentLogState(\n\n) -> Vector{Tuple{Dates.DateTime, MINDFul.IntentState.T}}\nIntentLogState(\n    intentstate::MINDFul.IntentState.T\n) -> Vector{Tuple{Dates.DateTime, MINDFul.IntentState.T}}\n\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.IntentLogState-2","page":"API","title":"MINDFul.IntentLogState","text":"Stores a vector of the history of the intent states and their timings\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.KShorestPathFirstFitCompilation","page":"API","title":"MINDFul.KShorestPathFirstFitCompilation","text":"struct KShorestPathFirstFitCompilation <: MINDFul.IntentCompilationAlgorithm\n\nk::Int64: How many k paths to check\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.LightpathIntent","page":"API","title":"MINDFul.LightpathIntent","text":"struct LightpathIntent <: MINDFul.AbstractIntent\n\npath::Vector{Int64}\n\nExpresses an intent for a lightpath. Compilation should yield: \n\nsource and destination port indices\ntransmissionmodule selection\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.LocalNode","page":"API","title":"MINDFul.LocalNode","text":"Signifies a local node notation as a single integer\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.LowLevelIntent","page":"API","title":"MINDFul.LowLevelIntent","text":"abstract type LowLevelIntent <: MINDFul.AbstractIntent\n\nAn abstract subtype of AbstractIntent notating device-level intents and should return is_low_level_intent to be true\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.MachineGenerated","page":"API","title":"MINDFul.MachineGenerated","text":"Intent is generated automatically by the IBN Framework\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.NetworkOperator","page":"API","title":"MINDFul.NetworkOperator","text":"Intent issued directly by the network operator, i.e., a user intent\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.NodeProperties","page":"API","title":"MINDFul.NodeProperties","text":"struct NodeProperties\n\nlocalnode::Int64\nglobalnode::MINDFul.GlobalNode\nlatitude::Float64\nlongitude::Float64\ninneighbors::Vector{Int64}: The list of neighbohrs coming in\noutneighbors::Vector{Int64}: The list of neighbohrs going out\n\nAn immutable description of the node properties\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.NodeView","page":"API","title":"MINDFul.NodeView","text":"struct NodeView{R<:MINDFul.RouterView, O<:MINDFul.OXCView, T<:MINDFul.TransmissionModuleView} <: MINDFul.ReservableResourceView\n\nnodeproperties::MINDFul.NodeProperties: The NodeProperties\nrouterview::Union{Nothing, R} where R<:MINDFul.RouterView: The router in use\noxcview::Union{Nothing, O} where O<:MINDFul.OXCView: The OXC in use\ntransmissionmoduleviewpool::Union{Nothing, Vector{T}} where T<:MINDFul.TransmissionModuleView: The transmission modules contained\ntransmissionmodulereservations::Union{Nothing, Dict{Base.UUID, MINDFul.TransmissionModuleLLI}}: intent reservation of the transmission modules\n\nThe view of the current node settings Reservables resources reservations are nothing if it represents a border node.\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.OXCAddDropBypassSpectrumLLI","page":"API","title":"MINDFul.OXCAddDropBypassSpectrumLLI","text":"struct OXCAddDropBypassSpectrumLLI <: MINDFul.LowLevelIntent\n\nlocalnode::Int64: Target node\nlocalnode_input::Int64: The node in graph entering the OXC (or 0 if invalid)\nadddropport::Int64: The port index adding or dropping an optical signal (or 0 if invalid)\nlocalnode_output::Int64: The node in graph exiting the OXC (or 0 if invalid)\nspectrumslotsrange::UnitRange{Int64}: The spectrum range allocated 1-based indexed\n\nA value-based interpretation of (input, adddrop, output). At least one of the 3 elements must be 0. (x, 0, y) means optical bypass from the localnode x to the localnode y (0, x, y) means adding an optical signal from add port x going to the localnode y (x, y, 0) means droping an optical signal from  the localnode x to the drop port y (0, x, 0) mean that an add/drop allocation port is only reserved (is needed on top for an add/drop signal)\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.OXCView","page":"API","title":"MINDFul.OXCView","text":"struct OXCView{O<:MINDFul.AbstractOXC} <: MINDFul.ReservableResourceView\n\noxc::MINDFul.AbstractOXC: the underlying OXC\nadddropportnumber::Int64: The number of add/drop ports in OXC\nswitchreservations::Dict{Base.UUID, MINDFul.OXCAddDropBypassSpectrumLLI}: The intent reservations together with the configuration\nlinkspectrumavailabilities::Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, Vector{Bool}}: Link spectrum availability total view in sync with switchreservations. A vector showing the availability of the spectrum slots. true for available and false for reserved. The vector views should be the same with the ones on the opposite OXC view.\n\nA view of a OXC .\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.OpticalInitiateConstraint","page":"API","title":"MINDFul.OpticalInitiateConstraint","text":"struct OpticalInitiateConstraint <: MINDFul.AbstractIntentConstraint\n\nConstraint that requires the intent to initiate optically. It's combined with an (@ref)[OpticalTerminateConstraint] before. It contains some requirements for the connection to work out.\n\nglobalnode_input::MINDFul.GlobalNode: The incoming border node entering the OXC\nspectrumslotsrange::UnitRange{Int64}: The spectrum range allocated 1-based indexed\nopticalreach::Unitful.Quantity{Float64, ùêã, Unitful.FreeUnits{(km,), ùêã, nothing}}: the remaining optical reach to use\ntransmissionmodulecompat::MINDFul.TransmissionModuleCompatibility: Requirements for termination in the electical layer\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.OpticalTerminateConstraint","page":"API","title":"MINDFul.OpticalTerminateConstraint","text":"struct OpticalTerminateConstraint <: MINDFul.AbstractIntentConstraint\n\nConstraint that requires the intent to terminate optically one node before the destination. It's combined with an (@ref)[OpticalInitiateConstraint] after.\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.RemoteIBNFHandler","page":"API","title":"MINDFul.RemoteIBNFHandler","text":"struct RemoteIBNFHandler <: MINDFul.AbstractIBNFHandler\n\nFabian Gobantes implementation. Should consist of basic information all handlers should have (e.g. ibnfid). And a parametric type specific to the protocol used.\n\n    struct HandlerProperties\n        ibnfid::UUID\n        # ...\n    end\n\n    struct IBNFHTTP2Comm <: AbstractIBNFComm\n        # example\n    end\n\n    struct IBNFSameProcess{T<:IBNFramework} <: AbstractIBNFComm\n        # this can  be the new dummy and substitute the current dummy implementation\n        ibng::T\n    end\n\n    struct RemoteIBNFHandler{T<:AbstractIBNFComm} <: AbstractIBNFHandler\n        handlerproperties::HandlerProperties\n        ibnfcomm::T\n    end\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.RemoteIntent","page":"API","title":"MINDFul.RemoteIntent","text":"struct RemoteIntent{I<:MINDFul.AbstractIntent} <: MINDFul.AbstractIntent\n\nibnfid::Base.UUID: The id of the remote IBN framework\nidagnodeid::Base.UUID: The dag node id of the remote IBN framework\nintent::MINDFul.AbstractIntent: The intent to be transferred\nisinitiator::Bool: true if the intent originates here and false otherwise\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.ReservableResourceView","page":"API","title":"MINDFul.ReservableResourceView","text":"The following functions should be implemented for subtypes:\n\ngetreservations(subtype::ReservableResourceView)::Dict{UUID, T}\ncanreserve(subtype::ReservableResourceView, reservation::T)::Bool\n\nThe following default functions exist that should already work\n\nreserve!(subtype::ReservableResourceView, dagnodeid::UUID, reservation::T; checkfirst::Bool=true)::Bool\nunreserve!(subtype::ReservableResourceView, dagnodeid::UUID)::Bool\ninsertreservation!(subtype::ReservableResourceView, dagnodeid::UUID, reservation::T)\ndeletereservation!(subtype::ReservableResourceView, dagnodeid::UUID)\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.RouterPortLLI","page":"API","title":"MINDFul.RouterPortLLI","text":"struct RouterPortLLI <: MINDFul.LowLevelIntent\n\nlocalnode::Int64: Target node\nrouterportindex::Int64: The router port index to be reserved\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.RouterView","page":"API","title":"MINDFul.RouterView","text":"struct RouterView{R<:MINDFul.AbstractRouter} <: MINDFul.ReservableResourceView\n\nA view of a router with several ports.\n\nrouter::MINDFul.AbstractRouter: The underlying router\nportnumber::Int64: number of ports in router\nportreservations::Dict{Base.UUID, MINDFul.RouterPortLLI}: The intent reservations together with the low level intent of reserved port\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.SDNdummy","page":"API","title":"MINDFul.SDNdummy","text":"struct SDNdummy <: MINDFul.AbstractSDNController\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.TransmissionMode","page":"API","title":"MINDFul.TransmissionMode","text":"struct TransmissionMode\n\nRepresents a transmission mode. A transponder, if flexible, might support many of them.\n\nopticalreach::Unitful.Quantity{Float64, ùêã, Unitful.FreeUnits{(km,), ùêã, nothing}}: Optical reach in kilometers\nrate::Unitful.Quantity{Float64, Data ùêì^-1, Unitful.FreeUnits{(Gbps,), Data ùêì^-1, nothing}}: rate in Gbps\nspectrumslotsneeded::Int64: Number of 12.5 GHz frequency slots needed\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.TransmissionModuleCompatibility","page":"API","title":"MINDFul.TransmissionModuleCompatibility","text":"struct TransmissionModuleCompatibility\n\nrate::Unitful.Quantity{Float64, Data ùêì^-1, Unitful.FreeUnits{(Gbps,), Data ùêì^-1, nothing}}: The bandwidth of the connection\nspectrumslotsneeded::Int64: Number of 12.5Gz frequency slots needed\nname::String: descriptive name of the transmission module\n\nDescribe what requirements are needed to establish transmission module end-to-end connection Modulation should be here but it's not. Dissagregetation data should be here but it's not. Both are covered by the name which must be equal in both ends\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.TransmissionModuleIntent","page":"API","title":"MINDFul.TransmissionModuleIntent","text":"struct TransmissionModuleIntent <: MINDFul.AbstractIntent\n\nContains the requirements to compile down to TransmissionModuleLLI\n\nrate::Unitful.Quantity{Float64, Data ùêì^-1, Unitful.FreeUnits{(Gbps,), Data ùêì^-1, nothing}}: The data rate requierement\nopticalreach::Unitful.Quantity{Float64, ùêã, Unitful.FreeUnits{(km,), ùêã, nothing}}: Optical reach requirements in kilometres\nspectrumslotsneeded::Int64: Number of 12.5 GHz frequency slots needed\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.TransmissionModuleLLI","page":"API","title":"MINDFul.TransmissionModuleLLI","text":"struct TransmissionModuleLLI <: MINDFul.LowLevelIntent\n\nlocalnode::Int64: Target node\ntransmissionmoduleviewpoolindex::Int64: The index of the transmission module pool to be reserved\ntransmissionmodesindex::Int64: The selected mode of the transmission module. 0 means nothing is still selected. Non elastic modules can have only 1.\n\n\n\n\n\n","category":"type"},{"location":"API/#MINDFul.TransmissionModuleView","page":"API","title":"MINDFul.TransmissionModuleView","text":"struct TransmissionModuleView{T<:MINDFul.AbstractTransmissionModule}\n\ntransmissionmodule::MINDFul.AbstractTransmissionModule: The underlying transmission module\nname::String: descriptive name of the transmission module\ntransmissionmodes::Vector{MINDFul.TransmissionMode}: operating transmission modes\ncost::Float64: Cost of the transmission module (in unit costs)\n\nA view of a transmission module.\n\n\n\n\n\n","category":"type"},{"location":"API/#Base.show-Union{Tuple{I}, Tuple{IO, I}} where I<:MINDFul.IBNFramework","page":"API","title":"Base.show","text":"show(io::IO, ibnf::MINDFul.IBNFramework)\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.addidagnode!-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, MINDFul.AbstractIntent}","page":"API","title":"MINDFul.addidagnode!","text":"addidagnode!(\n    intentdag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    intent::MINDFul.AbstractIntent;\n    parentid,\n    intentissuer\n) -> MINDFul.IntentDAGNode{I, MINDFul.MachineGenerated} where I<:MINDFul.AbstractIntent\n\n\nReturn the IntentDAGNode\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.addidagnode!-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, MINDFul.IntentDAGNode}","page":"API","title":"MINDFul.addidagnode!","text":"addidagnode!(\n    intentdag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    idagnode::MINDFul.IntentDAGNode;\n    parentid,\n    intentissuer\n) -> Base.UUID\n\n\nReturn the UUID\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.allocate_oxcspectrumslots-Tuple{MINDFul.IBNFramework, Base.UUID, Int64}","page":"API","title":"MINDFul.allocate_oxcspectrumslots","text":"allocate_oxcspectrumslots(\n    ibnf::MINDFul.IBNFramework,\n    dagnodeid::Base.UUID,\n    localnode::Int64\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.allocate_transmissionmodule-Tuple{MINDFul.IBNFramework, Base.UUID, Int64, MINDFul.TransmissionModuleLLI}","page":"API","title":"MINDFul.allocate_transmissionmodule","text":"allocate_transmissionmodule(\n    ibnf::MINDFul.IBNFramework,\n    dagnodeid::Base.UUID,\n    localnode::Int64,\n    transmissionmodulereservationentry::MINDFul.TransmissionModuleLLI\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.aretransmissionmodulescompatible-Tuple{MINDFul.TransmissionModuleView, MINDFul.TransmissionModuleView}","page":"API","title":"MINDFul.aretransmissionmodulescompatible","text":"aretransmissionmodulescompatible(\n    tmv1::MINDFul.TransmissionModuleView,\n    tmv2::MINDFul.TransmissionModuleView\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.canreserve-Tuple{MINDFul.AbstractSDNController, MINDFul.NodeView, MINDFul.TransmissionModuleLLI}","page":"API","title":"MINDFul.canreserve","text":"canreserve(\n    sdn::MINDFul.AbstractSDNController,\n    nodeview::MINDFul.NodeView,\n    transmissionmodulelli::MINDFul.TransmissionModuleLLI;\n    verbose\n) -> Bool\n\n\nSet verbose=true to see where the reservation fails\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.canreserve-Tuple{MINDFul.AbstractSDNController, MINDFul.OXCView, MINDFul.OXCAddDropBypassSpectrumLLI}","page":"API","title":"MINDFul.canreserve","text":"canreserve(\n    sdn::MINDFul.AbstractSDNController,\n    oxcview::MINDFul.OXCView,\n    oxcswitchreservationentry::MINDFul.OXCAddDropBypassSpectrumLLI;\n    verbose\n) -> Bool\n\n\nCheck whether\n\nadd/drop port exists\nadd/drop port already in use\nspectrum in fibers in use\n\nSet verbose=true to see where the reservation fails\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.canreserve-Tuple{MINDFul.AbstractSDNController, MINDFul.RouterView, MINDFul.RouterPortLLI}","page":"API","title":"MINDFul.canreserve","text":"canreserve(\n    sdn::MINDFul.AbstractSDNController,\n    routerview::MINDFul.RouterView,\n    routerportlli::MINDFul.RouterPortLLI;\n    verbose\n) -> Bool\n\n\nCheck if router port exists and whether it is already used\n\nSet verbose=true to see where the reservation fails\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.constructfromdict-Union{Tuple{T}, Tuple{Type{T}, Dict{Symbol}, Dict{Symbol}}} where T","page":"API","title":"MINDFul.constructfromdict","text":"constructfromdict(\n    _::Type{T},\n    dict::Dict{Symbol},\n    dict2::Dict{Symbol}\n) -> MINDFul.NodeProperties\n\n\nConvenience function to construct any struct of type T by passing a Dict corresponding to the fields needed. A further dict dict2 is searched for data.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.constructfromdict-Union{Tuple{T}, Tuple{Type{T}, Dict{Symbol}}} where T","page":"API","title":"MINDFul.constructfromdict","text":"constructfromdict(\n    _::Type{T},\n    dict::Dict{Symbol}\n) -> MINDFul.EdgeProperties\n\n\nConvenience function to construct any struct of type T by passing a Dict corresponding to the fields needed.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.deallocate_transmissionmodule-Tuple{MINDFul.IBNFramework, Int64, MINDFul.TransmissionModuleLLI}","page":"API","title":"MINDFul.deallocate_transmissionmodule","text":"deallocate_transmissionmodule(\n    ibnf::MINDFul.IBNFramework,\n    localnode::Int64,\n    transmissionmodulereservationentry::MINDFul.TransmissionModuleLLI\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.default_OXCview-Tuple{MINDFul.NodeProperties, Int64}","page":"API","title":"MINDFul.default_OXCview","text":"default_OXCview(\n    nodeproperties::MINDFul.NodeProperties,\n    spectrumslots::Int64\n) -> MINDFul.OXCView{MINDFul.OXCDummy}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.deletereservation!-Tuple{MINDFul.AbstractSDNController, MINDFul.ReservableResourceView, Base.UUID}","page":"API","title":"MINDFul.deletereservation!","text":"deletereservation!(\n    sdn::MINDFul.AbstractSDNController,\n    resourceview::MINDFul.ReservableResourceView,\n    dagnodeid::Base.UUID;\n    verbose\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.deletereservationhook!-Tuple{MINDFul.AbstractSDNController, MINDFul.OXCView, Base.UUID}","page":"API","title":"MINDFul.deletereservationhook!","text":"deletereservationhook!(\n    sdn::MINDFul.AbstractSDNController,\n    oxcview::MINDFul.OXCView,\n    dagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.deletereservationhook!-Tuple{MINDFul.AbstractSDNController, MINDFul.ReservableResourceView, Base.UUID}","page":"API","title":"MINDFul.deletereservationhook!","text":"deletereservationhook!(\n    sdn::MINDFul.AbstractSDNController,\n    resourceview::MINDFul.ReservableResourceView,\n    dagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\nImplement this function to do custom actions per specific ReservableResourceView\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.displayavailablecompilationalgorithmsinfo-Tuple{MINDFul.IBNFramework, Any}","page":"API","title":"MINDFul.displayavailablecompilationalgorithmsinfo","text":"displayavailablecompilationalgorithmsinfo(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnfhandler\n)\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.edgeify-Tuple{Vector{Int64}}","page":"API","title":"MINDFul.edgeify","text":"edgeify(\n    path::Vector{Int64}\n) -> Vector{Graphs.SimpleGraphs.SimpleEdge{Int64}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.emptyaggraphwithnewuuid-Union{Tuple{T}, Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID}, Base.UUID}} where T<:MINDFul.NodeView","page":"API","title":"MINDFul.emptyaggraphwithnewuuid","text":"emptyaggraphwithnewuuid(\n    ibnag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Array{T<:MINDFul.NodeView, 1}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID},\n    uuid::Base.UUID\n) -> AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.firstfit-Tuple{AbstractVector{Bool}, Int64}","page":"API","title":"MINDFul.firstfit","text":"firstfit(\n    boolvec::AbstractVector{Bool},\n    lenghrequire::Int64\n) -> Union{Nothing, Int64}\n\n\nFinds first contiguous slot range of length lengthrequire that satisfies the boolvec. Return the starting index of the range or nothing if none available\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.generatelightpathoxcadddropbypassspectrumlli-Tuple{Vector{Int64}, UnitRange{Int64}}","page":"API","title":"MINDFul.generatelightpathoxcadddropbypassspectrumlli","text":"generatelightpathoxcadddropbypassspectrumlli(\n    path::Vector{Int64},\n    spectrumslotsrange::UnitRange{Int64};\n    sourceadddropport,\n    opticalinitincomingnode,\n    destadddropport\n) -> Vector{MINDFul.OXCAddDropBypassSpectrumLLI}\n\n\nReturn a list of (@ref)[OXCAddDropBypassSpectrumLLI] that constitute a lightpath. According to the arguments a \"starting lightpath\", an \"ending lightpath\", or a \"lightpath segment\" can be created. The arguments are the following:\n\nsourceadddropport: nothing for a starting lightpath and an Integer denating the add/drop port otherwise\nopticalinitincomingnode : the (@ref)[LocalNode] denoting the incoming optical connection from the specified node for a starting lightpath. Set to nothing if not a starting lightpath\ndestadddropport: nothing for an ending lightpath and an Integer denating the add/drop port otherwise\n\nNote: not both sourceadddropport and opticalinitincomingnode can be nothing or have a values at the same time.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getafterlliidx-Tuple{MINDFul.IBNFramework, MINDFul.ConnectivityIntent, Any, MINDFul.OXCAddDropBypassSpectrumLLI}","page":"API","title":"MINDFul.getafterlliidx","text":"getafterlliidx(\n    ibnf::MINDFul.IBNFramework,\n    conintent::MINDFul.ConnectivityIntent,\n    llis,\n    oxclli::MINDFul.OXCAddDropBypassSpectrumLLI;\n    verbose\n) -> Any\n\n\nReturn all next logical low level intent indices from llis given that now signal is positioned in OXCAddDropBypassSpectrumLLI such that the conintent is satisfied. Return an empty vector if no logical next is found.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getafterlliidx-Tuple{MINDFul.IBNFramework, MINDFul.ConnectivityIntent, Any, MINDFul.RouterPortLLI}","page":"API","title":"MINDFul.getafterlliidx","text":"getafterlliidx(\n    ibnf::MINDFul.IBNFramework,\n    conintent::MINDFul.ConnectivityIntent,\n    llis,\n    rplli::MINDFul.RouterPortLLI;\n    verbose\n) -> Any\n\n\nReturn all next logical low level intent indices from llis given that now signal is positioned in RouterPortLLI such that the conintent is satisfied. Return an empty vector if no logical next is found.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getafterlliidx-Tuple{MINDFul.IBNFramework, MINDFul.ConnectivityIntent, Any, MINDFul.TransmissionModuleLLI}","page":"API","title":"MINDFul.getafterlliidx","text":"getafterlliidx(\n    ibnf::MINDFul.IBNFramework,\n    conintent::MINDFul.ConnectivityIntent,\n    llis,\n    tmlli::MINDFul.TransmissionModuleLLI;\n    verbose\n) -> Any\n\n\nReturn all next logical low level intent indices from llis given that now signal is positioned in TransmissionModuleLLI such that the conintent is satisfied. Return an empty vector if no logical next is found.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getavailabletransmissionmoduleviewindex-Tuple{MINDFul.NodeView}","page":"API","title":"MINDFul.getavailabletransmissionmoduleviewindex","text":"getavailabletransmissionmoduleviewindex(\n    nodeview::MINDFul.NodeView\n) -> Vector{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getcompilationalgorithmtype-Tuple{Val{:kspff}}","page":"API","title":"MINDFul.getcompilationalgorithmtype","text":"getcompilationalgorithmtype(\n    s::Val{:kspff}\n) -> Type{MINDFul.KShorestPathFirstFitCompilation}\n\n\nGive back the algorithm mapped to the symbol\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getdefaultcompilationalgorithm-Tuple{MINDFul.IBNFramework}","page":"API","title":"MINDFul.getdefaultcompilationalgorithm","text":"getdefaultcompilationalgorithm(\n    ibnff::MINDFul.IBNFramework\n) -> Symbol\n\n\nCan overload for different Operation Modes.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getdefaultcompilationalgorithmargs-Tuple{Val{:kspff}}","page":"API","title":"MINDFul.getdefaultcompilationalgorithmargs","text":"getdefaultcompilationalgorithmargs(\n    s::Val{:kspff}\n) -> Tuple{Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getfirst-Tuple{Function, AbstractArray}","page":"API","title":"MINDFul.getfirst","text":"getfirst(predicate::Function, ar::AbstractArray) -> Any\n\n\nReturns the element is predicate is satisfied  or nothing otherwise.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getfirstavailableoxcadddropport-Tuple{MINDFul.NodeView}","page":"API","title":"MINDFul.getfirstavailableoxcadddropport","text":"getfirstavailableoxcadddropport(\n    nodeview::MINDFul.NodeView\n) -> Union{Nothing, Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getfirstavailableoxcadddropport-Tuple{MINDFul.OXCView}","page":"API","title":"MINDFul.getfirstavailableoxcadddropport","text":"getfirstavailableoxcadddropport(\n    oxcview::MINDFul.OXCView\n) -> Union{Nothing, Int64}\n\n\nReturn the first available oxc add/drop port and nothing if none found\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getfirstavailablerouterportindex-Tuple{MINDFul.NodeView}","page":"API","title":"MINDFul.getfirstavailablerouterportindex","text":"getfirstavailablerouterportindex(\n    nodeview::MINDFul.NodeView\n) -> Union{Nothing, Int64}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getfirstavailablerouterportindex-Tuple{MINDFul.RouterView}","page":"API","title":"MINDFul.getfirstavailablerouterportindex","text":"getfirstavailablerouterportindex(\n    routerview::MINDFul.RouterView\n) -> Union{Nothing, Int64}\n\n\nReturn the first available router port index and nothing if non available.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getfirstcompatibletransmoduleidxandmodeidx-Tuple{Vector{<:MINDFul.TransmissionModuleView}, Vector{Int64}, MINDFul.TransmissionModuleCompatibility}","page":"API","title":"MINDFul.getfirstcompatibletransmoduleidxandmodeidx","text":"getfirstcompatibletransmoduleidxandmodeidx(\n    transmissionmoduleviewpool::Vector{<:MINDFul.TransmissionModuleView},\n    availtransmdlidxs::Vector{Int64},\n    transmissionmodulecompat::MINDFul.TransmissionModuleCompatibility\n) -> Union{Nothing, Tuple{Int64, Int64}}\n\n\nReturn a integer tuple (Int, Int) denoting the first available and compatible transmission module index and its transmission mode index. If non found return nothing.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidaginfo-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}}","page":"API","title":"MINDFul.getidaginfo","text":"getidaginfo(\n    intentdag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}\n) -> MINDFul.IntentDAGInfo\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnextuuidcounter-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}}","page":"API","title":"MINDFul.getidagnextuuidcounter","text":"getidagnextuuidcounter(\n    intentdag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}\n) -> Base.UUID\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnode-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, Base.UUID}","page":"API","title":"MINDFul.getidagnode","text":"getidagnode(\n    intentdag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    dagnodeid::Base.UUID\n) -> MINDFul.IntentDAGNode\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodechildren-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, Base.UUID}","page":"API","title":"MINDFul.getidagnodechildren","text":"getidagnodechildren(\n    idag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    idagnodeid::Base.UUID\n) -> Vector{MINDFul.IntentDAGNode}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodechildren-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, MINDFul.IntentDAGNode}","page":"API","title":"MINDFul.getidagnodechildren","text":"getidagnodechildren(\n    idag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    idagnode::MINDFul.IntentDAGNode\n) -> Vector{MINDFul.IntentDAGNode}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodedescendants-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, Base.UUID}","page":"API","title":"MINDFul.getidagnodedescendants","text":"getidagnodedescendants(\n    idag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    idagnodeid::Base.UUID;\n    exclusive\n) -> Vector{MINDFul.IntentDAGNode}\n\n\nGet all descendants of DAG dag starting from node idagnodeid Set exclusive=true  to get nodes that have idagnodeid as the only ancestor\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodeidx-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, Base.UUID}","page":"API","title":"MINDFul.getidagnodeidx","text":"getidagnodeidx(\n    intentdag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    dagnodeid::Base.UUID\n) -> Int64\n\n\nGet the vertex index of the intent DAG node with id dagnodeid. Errors if UUID doesn't exist.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodeleafs-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, Base.UUID}","page":"API","title":"MINDFul.getidagnodeleafs","text":"getidagnodeleafs(\n    idag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    idagnodeid::Base.UUID;\n    exclusive\n) -> Vector{MINDFul.IntentDAGNode}\n\n\nGet the leafs of DAG dag starting from node idn. Set exclusive=true to get nodes that have idn as the only ancestor\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodellis-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, Base.UUID}","page":"API","title":"MINDFul.getidagnodellis","text":"getidagnodellis(\n    idag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    idagnodeid::Base.UUID;\n    exclusive\n) -> Vector{MINDFul.IntentDAGNode}\n\n\nGet all the Low Level Intents that are leafs of idagnodeid Set exclusive=true to get nodes that have idn as the only ancestor\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodellis-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}}","page":"API","title":"MINDFul.getidagnodellis","text":"getidagnodellis(\n    idag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}\n) -> Vector{MINDFul.IntentDAGNode}\n\n\nGet all the Low Level Intents that exist on the DAG\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodeparents-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, Base.UUID}","page":"API","title":"MINDFul.getidagnodeparents","text":"getidagnodeparents(\n    idag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    idagnodeid::Base.UUID\n) -> Vector{MINDFul.IntentDAGNode}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodeparents-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, MINDFul.IntentDAGNode}","page":"API","title":"MINDFul.getidagnodeparents","text":"getidagnodeparents(\n    idag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    idagnode::MINDFul.IntentDAGNode\n) -> Vector{MINDFul.IntentDAGNode}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getidagnodes-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}}","page":"API","title":"MINDFul.getidagnodes","text":"getidagnodes(\n    intentdag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}\n) -> Vector{MINDFul.IntentDAGNode}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getlowestratetransmissionmode-Tuple{MINDFul.TransmissionModuleView, Unitful.Quantity{Float64, Data ùêì^-1, Unitful.FreeUnits{(Gbps,), Data ùêì^-1, nothing}}, Unitful.Quantity{Float64, ùêã, Unitful.FreeUnits{(km,), ùêã, nothing}}}","page":"API","title":"MINDFul.getlowestratetransmissionmode","text":"getlowestratetransmissionmode(\n    transmissionmoduleview::MINDFul.TransmissionModuleView,\n    demandrate::Unitful.Quantity{Float64, Data ùêì^-1, Unitful.FreeUnits{(Gbps,), Data ùêì^-1, nothing}},\n    demanddistance::Unitful.Quantity{Float64, ùêã, Unitful.FreeUnits{(km,), ùêã, nothing}}\n) -> Union{Nothing, Int64}\n\n\nReturn the index with the lowest GBPS rate that can get deployed for the given demand rate and distance. If non is find return nothing.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getname-Tuple{Any}","page":"API","title":"MINDFul.getname","text":"getname(s) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getnumberofparameters-Tuple{T} where T<:MINDFul.IntentCompilationAlgorithm","page":"API","title":"MINDFul.getnumberofparameters","text":"getnumberofparameters(\n    _::MINDFul.IntentCompilationAlgorithm\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.getnumberofparameters-Union{Tuple{Type{T}}, Tuple{T}} where T<:MINDFul.IntentCompilationAlgorithm","page":"API","title":"MINDFul.getnumberofparameters","text":"getnumberofparameters(\n    _::Type{T<:MINDFul.IntentCompilationAlgorithm}\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.hasidagnodechildren-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, Base.UUID}","page":"API","title":"MINDFul.hasidagnodechildren","text":"hasidagnodechildren(\n    idag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    idagnodeid::Base.UUID\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.hasidagnodechildren-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}, MINDFul.IntentDAGNode}","page":"API","title":"MINDFul.hasidagnodechildren","text":"hasidagnodechildren(\n    idag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo},\n    idagnode::MINDFul.IntentDAGNode\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.increaseidagcounter!-Tuple{AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}}","page":"API","title":"MINDFul.increaseidagcounter!","text":"increaseidagcounter!(\n    intentdag::AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{MINDFul.IntentDAGNode}, Nothing, MINDFul.IntentDAGInfo}\n) -> Int64\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.insertreservation!-Tuple{MINDFul.AbstractSDNController, MINDFul.ReservableResourceView, Base.UUID, Any}","page":"API","title":"MINDFul.insertreservation!","text":"insertreservation!(\n    sdn::MINDFul.AbstractSDNController,\n    resourceview::MINDFul.ReservableResourceView,\n    dagnodeid::Base.UUID,\n    reservationdescription;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.insertreservationhook!-Tuple{MINDFul.AbstractSDNController, MINDFul.OXCView, Base.UUID, MINDFul.OXCAddDropBypassSpectrumLLI}","page":"API","title":"MINDFul.insertreservationhook!","text":"insertreservationhook!(\n    sdn::MINDFul.AbstractSDNController,\n    oxcview::MINDFul.OXCView,\n    dagnodeid::Base.UUID,\n    reservationdescription::MINDFul.OXCAddDropBypassSpectrumLLI;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.insertreservationhook!-Tuple{MINDFul.AbstractSDNController, MINDFul.ReservableResourceView, Base.UUID, Any}","page":"API","title":"MINDFul.insertreservationhook!","text":"insertreservationhook!(\n    sdn::MINDFul.AbstractSDNController,\n    resourceview::MINDFul.ReservableResourceView,\n    dagnodeid::Base.UUID,\n    reservationdescription;\n    verbose\n) -> Bool\n\n\nImplement this function to do custom actions per specific ReservableResourceView\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.is_low_level_intent-Tuple{MINDFul.ConnectivityIntent}","page":"API","title":"MINDFul.is_low_level_intent","text":"is_low_level_intent(ci::MINDFul.ConnectivityIntent) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.isaddportallocation-Tuple{MINDFul.OXCAddDropBypassSpectrumLLI}","page":"API","title":"MINDFul.isaddportallocation","text":"isaddportallocation(\n    oxcswitchentry::MINDFul.OXCAddDropBypassSpectrumLLI\n) -> Bool\n\n\nChecks if this reservation reserves the add port, i.e., it's (0, x, y).\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.isdropportallocation-Tuple{MINDFul.OXCAddDropBypassSpectrumLLI}","page":"API","title":"MINDFul.isdropportallocation","text":"isdropportallocation(\n    oxcswitchentry::MINDFul.OXCAddDropBypassSpectrumLLI\n) -> Bool\n\n\nChecks if this reservation reserves the drop port, i.e., it's (x, y, 0).\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.isinternalorborderintent-Tuple{MINDFul.IBNFramework, MINDFul.ConnectivityIntent}","page":"API","title":"MINDFul.isinternalorborderintent","text":"isinternalorborderintent(\n    ibnf::MINDFul.IBNFramework,\n    connectivityintent::MINDFul.ConnectivityIntent\n) -> Bool\n\n\nReturn true if at least source or destination is internal.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.isreservationvalid","page":"API","title":"MINDFul.isreservationvalid","text":"isreservationvalid(\n    oxcswitchreservationentry::MINDFul.OXCAddDropBypassSpectrumLLI\n) -> Bool\nisreservationvalid(\n    oxcswitchreservationentry::MINDFul.OXCAddDropBypassSpectrumLLI,\n    verbose::Bool\n) -> Bool\n\n\n\n\n\n\n","category":"function"},{"location":"API/#MINDFul.issatisfied-Tuple{MINDFul.IBNFramework, MINDFul.IntentDAGNode{<:MINDFul.ConnectivityIntent}}","page":"API","title":"MINDFul.issatisfied","text":"issatisfied(\n    ibnf::MINDFul.IBNFramework,\n    idagnode::MINDFul.IntentDAGNode{<:MINDFul.ConnectivityIntent};\n    onlyinstalled,\n    noextrallis,\n    verbose\n) -> Bool\n\n\nSteps by step check if ibnf satisfies the intent For now works only with local view. The options are:\n\nonlyinstalled: only consideres installed intents\nnoextrallis: all LLI must be used\norderedllis: pass list to access ordered llis\n\nThe function is not a definite assertion. The following cases are not covered:\n\ntransmission module compatibility\noptical reach\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.istransmissionmoduleandmodecompatible-Tuple{MINDFul.TransmissionModuleView, Int64, MINDFul.TransmissionModuleCompatibility}","page":"API","title":"MINDFul.istransmissionmoduleandmodecompatible","text":"istransmissionmoduleandmodecompatible(\n    transmissionmoduleview::MINDFul.TransmissionModuleView,\n    transmissionmodesindex::Int64,\n    transmissionmodulecompat::MINDFul.TransmissionModuleCompatibility\n) -> Bool\n\n\nReturn true if the transmissionmoduleview and mode support the transmissionmodulecompat If onlymodecheck = true is passed then the disaggregation/protocol (aka name) will not be checked.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.istransmissionmoduleandmodecompatible-Tuple{MINDFul.TransmissionModuleView, MINDFul.TransmissionMode, MINDFul.TransmissionModuleCompatibility}","page":"API","title":"MINDFul.istransmissionmoduleandmodecompatible","text":"istransmissionmoduleandmodecompatible(\n    transmissionmoduleview::MINDFul.TransmissionModuleView,\n    transmissionmode::MINDFul.TransmissionMode,\n    transmissionmodulecompat::MINDFul.TransmissionModuleCompatibility\n) -> Bool\n\n\nReturn true if the transmissionmoduleview and mode support the transmissionmodulecompat If onlymodecheck = true is passed then the disaggregation/protocol (aka name) will not be checked.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.istransmissionmoduleappropriate-Tuple{MINDFul.TransmissionModuleView, Unitful.Quantity{Float64, Data ùêì^-1, Unitful.FreeUnits{(Gbps,), Data ùêì^-1, nothing}}, Unitful.Quantity{Float64, ùêã, Unitful.FreeUnits{(km,), ùêã, nothing}}}","page":"API","title":"MINDFul.istransmissionmoduleappropriate","text":"istransmissionmoduleappropriate(\n    transmissionmoduleview::MINDFul.TransmissionModuleView,\n    demandrate::Unitful.Quantity{Float64, Data ùêì^-1, Unitful.FreeUnits{(Gbps,), Data ùêì^-1, nothing}},\n    demanddistance::Unitful.Quantity{Float64, ùêã, Unitful.FreeUnits{(km,), ùêã, nothing}}\n) -> Bool\n\n\nChecks if the transmission module can get deployed for the given demand rate and distance\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.istransmissionmodulecompatible-Tuple{MINDFul.TransmissionModuleView, MINDFul.TransmissionModuleCompatibility}","page":"API","title":"MINDFul.istransmissionmodulecompatible","text":"istransmissionmodulecompatible(\n    transmissionmoduleview::MINDFul.TransmissionModuleView,\n    transmissionmodulecompat::MINDFul.TransmissionModuleCompatibility\n) -> Bool\n\n\nReturn true if transmissionmoduleview can support with its modes the transmissionmodulecompat\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.kspffcrossdomain!-Tuple{MINDFul.IBNFramework, MINDFul.IntentDAGNode{<:MINDFul.ConnectivityIntent}, MINDFul.KShorestPathFirstFitCompilation, MINDFul.GlobalNode}","page":"API","title":"MINDFul.kspffcrossdomain!","text":"kspffcrossdomain!(\n    ibnf::MINDFul.IBNFramework,\n    idagnode::MINDFul.IntentDAGNode{<:MINDFul.ConnectivityIntent},\n    kspffalg::MINDFul.KShorestPathFirstFitCompilation,\n    mediatorbordernode::MINDFul.GlobalNode\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.kspffintradomain!-Tuple{MINDFul.IBNFramework, MINDFul.IntentDAGNode{<:MINDFul.ConnectivityIntent}, MINDFul.KShorestPathFirstFitCompilation}","page":"API","title":"MINDFul.kspffintradomain!","text":"kspffintradomain!(\n    ibnf::MINDFul.IBNFramework,\n    idagnode::MINDFul.IntentDAGNode{<:MINDFul.ConnectivityIntent},\n    kspffalg::MINDFul.KShorestPathFirstFitCompilation\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.kspffintradomain_destination!-Tuple{MINDFul.IBNFramework, MINDFul.IntentDAGNode{<:MINDFul.ConnectivityIntent}, Any, Any, Int64, UnitRange{Int64}}","page":"API","title":"MINDFul.kspffintradomain_destination!","text":"kspffintradomain_destination!(\n    ibnf::MINDFul.IBNFramework,\n    idagnode::MINDFul.IntentDAGNode{<:MINDFul.ConnectivityIntent},\n    lowlevelintentstoadd,\n    transmissionmodulecompat,\n    opticalincomingnode::Int64,\n    spectrumslotsrange::UnitRange{Int64}\n) -> Bool\n\n\nTakes care of the final node (destination) for the case of no `OpticalTerminateConstraint`\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.mycopy-Tuple{T} where T","page":"API","title":"MINDFul.mycopy","text":"mycopy(whatever) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.newoxcentry_adddropallocation","page":"API","title":"MINDFul.newoxcentry_adddropallocation","text":"newoxcentry_adddropallocation(port::Int64)\nnewoxcentry_adddropallocation(\n    port::Int64,\n    spectrumslotsrange::UnitRange{Int64}\n)\n\n\n\n\n\n\n","category":"function"},{"location":"API/#MINDFul.pushstatetoidagnode!-Tuple{Array{Tuple{Dates.DateTime, S}, 1} where S<:Enum{Int32}, Dates.DateTime, MINDFul.IntentState.T}","page":"API","title":"MINDFul.pushstatetoidagnode!","text":"pushstatetoidagnode!(\n    intentlogstate::Array{Tuple{Dates.DateTime, S}, 1} where S<:Enum{Int32},\n    time::Dates.DateTime,\n    intentstate::MINDFul.IntentState.T\n) -> Array{Tuple{Dates.DateTime, S}, 1} where S<:Enum{Int32}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.pushstatetoidagnode!-Tuple{Array{Tuple{Dates.DateTime, S}, 1} where S<:Enum{Int32}, MINDFul.IntentState.T}","page":"API","title":"MINDFul.pushstatetoidagnode!","text":"pushstatetoidagnode!(\n    intentlogstate::Array{Tuple{Dates.DateTime, S}, 1} where S<:Enum{Int32},\n    intentstate::MINDFul.IntentState.T\n) -> Array{Tuple{Dates.DateTime, S}, 1} where S<:Enum{Int32}\n\n\nUses now() time as default\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.pushstatetoidagnode!-Tuple{MINDFul.IntentDAGNode, Dates.DateTime, MINDFul.IntentState.T}","page":"API","title":"MINDFul.pushstatetoidagnode!","text":"pushstatetoidagnode!(\n    idagnode::MINDFul.IntentDAGNode,\n    time::Dates.DateTime,\n    intentstate::MINDFul.IntentState.T\n) -> Vector{Tuple{Dates.DateTime, MINDFul.IntentState.T}}\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestavailablecompilationalgorithms-Tuple{MINDFul.IBNFramework, MINDFul.IBNFramework}","page":"API","title":"MINDFul.requestavailablecompilationalgorithms","text":"requestavailablecompilationalgorithms(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.IBNFramework\n) -> Vector{Symbol}\n\n\nCompilation algorithms are given as symbols because they might not be available programmatically to different IBN frameworks\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestavailablecompilationalgorithms-Tuple{MINDFul.IBNFramework, MINDFul.RemoteIBNFHandler}","page":"API","title":"MINDFul.requestavailablecompilationalgorithms","text":"requestavailablecompilationalgorithms(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnfhandler::MINDFul.RemoteIBNFHandler\n)\n\n\nFabian Gobantes implementation\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestcompileintent_init!","page":"API","title":"MINDFul.requestcompileintent_init!","text":"requestcompileintent_init!(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID\n)\nrequestcompileintent_init!(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID,\n    compilationalgorithmkey::Symbol\n)\nrequestcompileintent_init!(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID,\n    compilationalgorithmkey::Symbol,\n    compilationalgorithmargs::Tuple\n) -> Bool\n\n\nThe initiator domain myibnf asks remoteibnf to compile the external remote intent idagnodeid with the specified compilation algorithm\n\n\n\n\n\n","category":"function"},{"location":"API/#MINDFul.requestcompileintent_init!-2","page":"API","title":"MINDFul.requestcompileintent_init!","text":"requestcompileintent_init!(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnfhandler::MINDFul.RemoteIBNFHandler\n)\nrequestcompileintent_init!(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnfhandler::MINDFul.RemoteIBNFHandler,\n    compilationalgorithm::Symbol\n)\nrequestcompileintent_init!(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnfhandler::MINDFul.RemoteIBNFHandler,\n    compilationalgorithm::Symbol,\n    compilationalgorithmkey::Tuple\n)\n\n\nFabian Gobantes implementation\n\n\n\n\n\n","category":"function"},{"location":"API/#MINDFul.requestcompileintent_term!","page":"API","title":"MINDFul.requestcompileintent_term!","text":"requestcompileintent_term!(\n    remoteibnfhandler::MINDFul.RemoteIBNFHandler,\n    myibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID\n)\nrequestcompileintent_term!(\n    remoteibnfhandler::MINDFul.RemoteIBNFHandler,\n    myibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID,\n    compilationalgorithmkey::Symbol\n)\nrequestcompileintent_term!(\n    remoteibnfhandler::MINDFul.RemoteIBNFHandler,\n    myibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID,\n    compilationalgorithmkey::Symbol,\n    compilationalgorithmargs::Tuple\n)\n\n\nFabian Gobantes implementation\n\nThe initiator domain remoteibnf asks this domain myibnf to compile the internal remote intent idagnodeid with the specified compilation algorithm\n\n\n\n\n\n","category":"function"},{"location":"API/#MINDFul.requestcompileintent_term!-2","page":"API","title":"MINDFul.requestcompileintent_term!","text":"requestcompileintent_term!(\n    remoteibnfhandler::MINDFul.AbstractIBNFHandler,\n    myibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID\n)\nrequestcompileintent_term!(\n    remoteibnfhandler::MINDFul.AbstractIBNFHandler,\n    myibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID,\n    compilationalgorithmkey::Symbol\n)\nrequestcompileintent_term!(\n    remoteibnfhandler::MINDFul.AbstractIBNFHandler,\n    myibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID,\n    compilationalgorithmkey::Symbol,\n    compilationalgorithmargs::Tuple\n)\n\n\nThe initiator domain remoteibnf asks this domain myibnf to compile the internal remote intent idagnodeid with the specified compilation algorithm\n\n\n\n\n\n","category":"function"},{"location":"API/#MINDFul.requestdelegateintent!-Tuple{MINDFul.IBNFramework, MINDFul.IBNFramework, MINDFul.AbstractIntent, Base.UUID}","page":"API","title":"MINDFul.requestdelegateintent!","text":"requestdelegateintent!(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.IBNFramework,\n    intent::MINDFul.AbstractIntent,\n    internalidagnodeid::Base.UUID\n) -> Base.UUID\n\n\nReturn the id of the new dag node if successful and nothing otherwise\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestdelegateintent!-Tuple{MINDFul.IBNFramework, MINDFul.RemoteIBNFHandler, MINDFul.AbstractIntent, Base.UUID}","page":"API","title":"MINDFul.requestdelegateintent!","text":"requestdelegateintent!(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnfhandler::MINDFul.RemoteIBNFHandler,\n    intent::MINDFul.AbstractIntent,\n    internalidagnodeid::Base.UUID\n)\n\n\nFabian Gobantes implementation\n\nDelegates an intent to another domain\n\nReturn the id of the new dag node if successful and nothing otherwise\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestibnattributegraph-Tuple{MINDFul.IBNFramework, MINDFul.IBNFramework}","page":"API","title":"MINDFul.requestibnattributegraph","text":"requestibnattributegraph(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.IBNFramework\n) -> AttributeGraphs.AttributeGraph{Int64, Graphs.SimpleGraphs.SimpleDiGraph{Int64}, Vector{T}, Dict{Graphs.SimpleGraphs.SimpleEdge{Int64}, MINDFul.EdgeView}, Base.UUID} where T<:MINDFul.NodeView\n\n\nRequest topology information\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestibnattributegraph-Tuple{MINDFul.IBNFramework, MINDFul.RemoteIBNFHandler}","page":"API","title":"MINDFul.requestibnattributegraph","text":"requestibnattributegraph(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnfhandler::MINDFul.RemoteIBNFHandler\n)\n\n\nFabian Gobantes implementation If far away, think about authorization and permissions. That's the reason why there are 2 arguments: The first argument should have the authorization.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestinstallintent_init!-Tuple{MINDFul.IBNFramework, MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.requestinstallintent_init!","text":"requestinstallintent_init!(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestinstallintent_term!-Tuple{MINDFul.AbstractIBNFHandler, MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.requestinstallintent_term!","text":"requestinstallintent_term!(\n    remoteibnfhandler::MINDFul.AbstractIBNFHandler,\n    myibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestissatisfied-Tuple{MINDFul.IBNFramework, MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.requestissatisfied","text":"requestissatisfied(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    onlyinstalled,\n    noextrallis\n)\n\n\nRequest to remoteibnf whether the idagnode is theoretically satisfied\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestissatisfied-Tuple{MINDFul.IBNFramework, MINDFul.RemoteIBNFHandler, MINDFul.IntentDAGNode}","page":"API","title":"MINDFul.requestissatisfied","text":"requestissatisfied(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.RemoteIBNFHandler,\n    idagnode::MINDFul.IntentDAGNode;\n    onlyinstalled,\n    noextrallis\n)\n\n\nFabian Gobantes implementation\n\nRequest to remoteibnf whether the idagnode is theoretically satisfied\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestremoteintentstateupdate!-Tuple{MINDFul.IBNFramework, MINDFul.IBNFramework, Base.UUID, MINDFul.IntentState.T}","page":"API","title":"MINDFul.requestremoteintentstateupdate!","text":"requestremoteintentstateupdate!(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID,\n    newstate::MINDFul.IntentState.T\n) -> Bool\n\n\nRequest the initiator remoteibnf to update the state of its mirrored remote intent\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestspectrumavailability-Tuple{MINDFul.IBNFramework, MINDFul.IBNFramework, MINDFul.GlobalEdge}","page":"API","title":"MINDFul.requestspectrumavailability","text":"requestspectrumavailability(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.IBNFramework,\n    ge::MINDFul.GlobalEdge\n) -> Union{Nothing, Vector{Bool}}\n\n\nRequest spectrum slot availabilities of the border edge Need to check whether ge is indeed an edge shared with myibnf\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestspectrumavailability-Tuple{MINDFul.IBNFramework, MINDFul.RemoteIBNFHandler, MINDFul.GlobalEdge}","page":"API","title":"MINDFul.requestspectrumavailability","text":"requestspectrumavailability(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnfhandler::MINDFul.RemoteIBNFHandler,\n    ge::MINDFul.GlobalEdge\n)\n\n\nFabian Gobantes implementation\n\nRequest spectrum slot availabilities of the border edge Need to check whether ge is indeed an edge shared with myibnf\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestuncompileintent_init!-Tuple{MINDFul.IBNFramework, MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.requestuncompileintent_init!","text":"requestuncompileintent_init!(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestuncompileintent_term!-Tuple{MINDFul.AbstractIBNFHandler, MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.requestuncompileintent_term!","text":"requestuncompileintent_term!(\n    remoteibnfhandler::MINDFul.AbstractIBNFHandler,\n    myibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestuninstallintent_init!-Tuple{MINDFul.IBNFramework, MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.requestuninstallintent_init!","text":"requestuninstallintent_init!(\n    myibnf::MINDFul.IBNFramework,\n    remoteibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.requestuninstallintent_term!-Tuple{MINDFul.AbstractIBNFHandler, MINDFul.IBNFramework, Base.UUID}","page":"API","title":"MINDFul.requestuninstallintent_term!","text":"requestuninstallintent_term!(\n    remoteibnfhandler::MINDFul.AbstractIBNFHandler,\n    myibnf::MINDFul.IBNFramework,\n    idagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.reserve!-Tuple{MINDFul.AbstractSDNController, MINDFul.ReservableResourceView, MINDFul.LowLevelIntent, Base.UUID}","page":"API","title":"MINDFul.reserve!","text":"reserve!(\n    sdn::MINDFul.AbstractSDNController,\n    resourceview::MINDFul.ReservableResourceView,\n    lowlevelintent::MINDFul.LowLevelIntent,\n    dagnodeid::Base.UUID;\n    checkfirst,\n    verbose\n) -> Bool\n\n\nTODO: put reservations on the OXC edges\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.reserveunreserveleafintents!-Tuple{MINDFul.IBNFramework, MINDFul.IntentDAGNode, Bool}","page":"API","title":"MINDFul.reserveunreserveleafintents!","text":"reserveunreserveleafintents!(\n    ibnf::MINDFul.IBNFramework,\n    idagnodeleaf::MINDFul.IntentDAGNode,\n    doinstall::Bool;\n    verbose\n) -> Bool\n\n\nto reserve pass doinstall=true, and to unreserve doinstall=false\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.setoxcviewlinkavailabilities!-Tuple{MINDFul.OXCView, MINDFul.OXCAddDropBypassSpectrumLLI, Bool}","page":"API","title":"MINDFul.setoxcviewlinkavailabilities!","text":"setoxcviewlinkavailabilities!(\n    oxcview::MINDFul.OXCView,\n    oxcadddropbypassspectrumlli::MINDFul.OXCAddDropBypassSpectrumLLI,\n    setflag::Bool;\n    verbose\n) -> Bool\n\n\nSet the link spectrum availabilities of the oxcview based on the OXC low level intent to setflags\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.unreserve!-Tuple{MINDFul.AbstractSDNController, MINDFul.ReservableResourceView, Base.UUID}","page":"API","title":"MINDFul.unreserve!","text":"unreserve!(\n    sdn::MINDFul.AbstractSDNController,\n    resourceview::MINDFul.ReservableResourceView,\n    dagnodeid::Base.UUID;\n    verbose\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.updateidagnodestates!-Tuple{MINDFul.IBNFramework, MINDFul.IntentDAGNode}","page":"API","title":"MINDFul.updateidagnodestates!","text":"updateidagnodestates!(\n    ibnf::MINDFul.IBNFramework,\n    idagnode::MINDFul.IntentDAGNode\n) -> Bool\n\n\nReturn value is true if state is changed.\n\n\n\n\n\n","category":"method"},{"location":"API/#MINDFul.@returniffalse-Tuple{Any, Any}","page":"API","title":"MINDFul.@returniffalse","text":"Return a return false if the expression ex evaluates to false. If verbose=true print the statement and the location. If the expression passed is true do nothing.\n\n\n\n\n\n","category":"macro"}]
}
